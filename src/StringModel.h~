#ifndef STRING_MODEL_H
#define STRING_MODEL_H

//----------------------------------------------------------
// include
//----------------------------------------------------------
#include <list>
#include "particle.h"
#include "FCalculator.h"
#include <iostream>
//----------------------------------------------------------
// namespace
//----------------------------------------------------------
using namespace std;
//----------------------------------------------------------
// class
//----------------------------------------------------------
class StringModel{
private:
	static const double INIT_DIST_PAR_TO_PAR;
	static const double INIT_K;
	static const double INIT_D;

private:
	// Motion parameter
	double stable_dist;
	double k;
	double d;
	
	// Particles
	list<Particle> lis_particle;
	list<Particle*> lis_fixed_particle;
	Particle* handle;

public:
	// Constructor
	StringModel();
	StringModel(const cv::Vec3d &, const cv::Vec3d &);
	StringModel(const StringModel &);

	// Setter
	void set_stable_dist(const double &);
	void set_handle(Particle*);

	// Getter
	int get_particle_num() const;
	double get_stable_dist() const ;
	Particle* get_handle() const;
	list<Particle>::iterator get_string_begin();
	list<Particle>::iterator get_string_back();
	list<Particle>::iterator get_string_end();
	
	// Get velocity of fastest particle
	Vec3d get_max_v();
	
	void calc_force();
	// Move all particles
	void move();

private:
	// Check Courant-Friedrichs-Lewy Condition 
	void checkCLF();
	// Chanege time step
	void set_dt(double);

};
#endif
